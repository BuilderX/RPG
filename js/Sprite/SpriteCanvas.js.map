{"version":3,"sources":["src/Sprite/SpriteCanvas.js"],"names":[],"mappings":"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","file":"src/Sprite/SpriteCanvas.js","sourcesContent":["/*\n\n2D Game Sprite Library, Built using JavaScript ES6\nCopyright (C) 2015 qhduan(http://qhduan.com)\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n*/\n\n/**\n * @fileoverview Class Sprite.Display\n * @author mail@qhduan.com (QH Duan)\n */\n\n(function () {\n \"use strict\";\n\n  let internal = Sprite.Namespace();\n\n  /**\n   * Class Sprite.Canvas, an renderer using canvas.getContext(\"2d\")\n   * @class\n   */\n  Sprite.assign(\"Canvas\", class SpriteCanvas {\n\n    /**\n     * @static\n     * @return {boolean} The browser whether or not support HTML5 canvas\n     */\n    static support () {\n      let canvas = document.createElement(\"canvas\");\n      let context = canvas.getContext(\"2d\");\n      if (context) {\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Construct a renderer width certain width and height\n     * @constructor\n     */\n    constructor (width, height) {\n      let privates = internal(this);\n      let canvas = document.createElement(\"canvas\");\n      canvas.width = width || 640;\n      canvas.height = height || 480;\n      let context = canvas.getContext(\"2d\");\n\n      if (!context) {\n        throw new Error(\"Sprite.Canvas canvas is not supported\");\n      }\n\n      console.log(\"canvas inited\");\n\n      /**\n       * Color after clear canvas\n       */\n      privates.color = \"#000000\";\n      /**\n       * The canvas object\n       */\n      privates.canvas = canvas;\n      /**\n       * Context of canvas\n       */\n      privates.context = context;\n      /**\n       * Global alpha\n       */\n      privates.alpha = 1;\n      /**\n       * Save some filter paramters, eg. brightness/contrast\n       */\n      privates.filter = new Map();\n      this.filter(\"brightness\", 0);\n      this.filter(\"contrast\", 0);\n    }\n\n    /**\n     * @param {string} name The name of filter you want get or set\n     * @param {number} value Number or undefined, if undefined ,return current value\n     */\n    filter (name, value) {\n      let privates = internal(this);\n      if (Number.isFinite(value)) {\n        if (name == \"brightness\") {\n          value += 1;\n        }\n        if (name == \"contrast\") {\n          value += 1;\n        }\n        if (privates.filter.get(name) != value) {\n          privates.filter.set(name, value);\n          let filter = [];\n          privates.filter.forEach((value, key, object) => {\n            filter.push(`${key}(${value})`);\n          });\n          filter = filter.join(\" \");\n          privates.canvas.style.filter = filter;\n          privates.canvas.style.webkitFilter = filter;\n        }\n      } else {\n        return privates.filter.get(name);\n      }\n    }\n    /**\n     * Draw an image on the canvas\n     * arguments same as canvas.getContext(\"2d\")\n     */\n    drawImage () {\n      let privates = internal(this);\n      privates.context.globalAlpha = this.alpha;\n      privates.context.drawImage.apply(privates.context, arguments);\n    }\n\n    /**\n     * Remove everything on canvas but a single color\n     */\n    clear () {\n      let privates = internal(this);\n      privates.context.fillStyle = privates.color;\n      privates.context.fillRect(0, 0, this.width, this.height);\n    }\n\n    /**\n     * @return {string} The color, eg \"#00ff00\"\n     */\n    get color () {\n      return internal(this).color;\n    }\n    /**\n     * @param {string} value The new color, eg \"#00ff00\"\n     */\n    set color (value) {\n      if (value.match(/^#([\\da-fA-F][\\da-fA-F])([\\da-fA-F][\\da-fA-F])([\\da-fA-F][\\da-fA-F])$/)) {\n        internal(this).color = value;\n      } else {\n        console.error(value, this);\n        throw new Error(\"Sprite.Canvas invalid color value\");\n      }\n    }\n\n    /**\n     * @return {number} The alpha, 0 to 1\n     */\n    get alpha () {\n      return internal(this).alpha;\n    }\n    /**\n     * @param {number} value The new alpha number\n     */\n    set alpha (value) {\n      if (Number.isFinite(value) &&\n        value >= 0 &&\n        value <= 1\n      ) {\n        internal(this).alpha = value;\n      } else {\n        console.error(value, this);\n        throw new Error(\"Sprite.Canvas got invalid alpha number\");\n      }\n    }\n\n    /**\n     * @return {number} Width of canvas\n     */\n    get width () {\n      return internal(this).canvas.width;\n    }\n    /**\n     * @param {number} value New width\n     */\n    set width (value) {\n      if (Number.isFinite(value) &&\n        value > 0 &&\n        value < 10000\n      ) {\n        internal(this).canvas.width = value;\n      } else {\n        console.error(value, this);\n        throw new Error(\"Sprite.Canvas got invalid width number\");\n      }\n    }\n\n    /**\n     * @return {number} Height of canvas\n     */\n    get height () {\n      return internal(this).canvas.height;\n    }\n    /**\n     * @param {number} value New height\n     */\n    set height (value) {\n      let privates = internal(this);\n      if (Number.isFinite(value) &&\n        value > 0 &&\n        value < 10000\n      ) {\n        if (value != privates.canvas.height) {\n          privates.canvas.height = value;\n        }\n      } else {\n        console.error(value, this);\n        throw new Error(\"Sprite.Canvas got invalid height number\");\n      }\n    }\n    /**\n     * @return {Object} Canvas\n     */\n    get canvas () {\n      return internal(this).canvas;\n    }\n\n    set canvas (value) {\n      throw new Error(\"Sprite.Canvas.canvas cannot write\");\n    }\n\n  });\n\n\n})();\n"]}