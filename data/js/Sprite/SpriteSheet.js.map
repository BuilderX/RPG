{"version":3,"sources":["src/Sprite/SpriteSheet.js"],"names":[],"mappings":"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","file":"src/Sprite/SpriteSheet.js","sourcesContent":["/*import \"js/Sprite/SpriteDisplay\";\n\n2D Game Sprite Library, Built using JavaScript ES6\nCopyright (C) 2015 qhduan(http://qhduan.com)\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n*/\n\n/**\n * @fileoverview Class Sprite.Sheet, maybe the most importent class\n * @author mail@qhduan.com (QH Duan)\n */\n\n(function () {\n \"use strict\";\n\n  let internal = Sprite.Namespace();\n\n  /**\n   * Class Sprite.Sheet, contain sprite's sheet and it's animation\n   * @class\n   * @extends Sprite.Display\n   */\n  Sprite.assign(\"Sheet\", class SpriteSheet extends Sprite.Display {\n    /**\n     * construct Sprite.Sheet\n     * @param config\n     * @constructor\n     */\n    constructor (config) {\n      super();\n      let privates = internal(this);\n\n      if (\n          !config.images || !config.images.length ||\n          !Number.isFinite(config.width) || config.width <= 0 || config.width > 4096 ||\n          !Number.isFinite(config.height) || config.height <= 0 || config.height > 4096\n        ) {\n        console.error(config)\n        throw new Error(\"Sprite.Sheet.constructor get invalid arguments\");\n      }\n\n      /**\n       * Contain one or more images\n       @type {Array}\n       @private\n       */\n      privates.images = config.images;\n      /**\n       * Width of each frame\n       @type {number}\n       @private\n       */\n      privates.tilewidth = config.width;\n      /**\n       * Height of each frame\n       @type {number}\n       @private\n       */\n      privates.tileheight = config.height;\n      /**\n       * Animations of this sprite sheet, eg. { \"walkdown\": [0, 2, \"\", 40], \"walkup\", [3, 5, \"\", 40] }\n       @type {Object}\n       @private\n       */\n      privates.animations = config.animations || {};\n      /**\n       * Current animation's name, eg. \"walkdown\", \"attackright\"\n       @type {string}\n       @private\n       */\n      privates.currentAnimation = null;\n      /**\n       * Current frame number, eg. 0, 1, 2, 3\n       @type {number}\n       @private\n       */\n      privates.currentFrame = 0;\n      /**\n       * If animationTimer is not null, it points an animation is running\n       * it will be null or an handler from setInterval\n       @type {Object}\n       @private\n       */\n      privates.animationTimer = null;\n\n      /**\n       * The number of frames we have\n       @type {number}\n       @private\n       */\n      privates.frameCount = 0;\n\n      for (let image of privates.images) {\n\n        if (!(image instanceof Image) && !(image.getContext && image.getContext(\"2d\"))) {\n          console.error(image, privates, this);\n          throw new Error(\"Sprite.Sheet got invalid image, not Image or Canvas\");\n        }\n\n        if (image.width <= 0 || !Number.isFinite(image.width) || image.height <= 0 || !Number.isFinite(image.height)) {\n          console.error(image, privates, this);\n          throw new Error(\"Sprite.Sheet got invalid image, invalid width or height\");\n        }\n\n        let col = Math.floor(image.width / privates.tilewidth);\n        let row = Math.floor(image.height / privates.tileheight);\n        privates.frameCount += col * row;\n      }\n    }\n    /**\n     * Clone Sprite.Sheet object itself\n     * @return {Object} Return an copy of this\n     */\n    clone () {\n      let privates = internal(this);\n      let sheet = new Sprite.Sheet({\n        images: privates.images,\n        width: privates.tilewidth,\n        height: privates.tileheight,\n        animations: privates.animations\n      });\n      sheet.x = this.x;\n      sheet.y = this.y;\n      sheet.centerX = this.centerX;\n      sheet.centerY = this.centerY;\n      sheet.play(this.currentFrame);\n      sheet.alpha = this.alpha;\n      sheet.visible = this.visible;\n      return sheet;\n    }\n    /**\n     * @return {boolean} Return false if an animation is running\n     */\n    get paused () {\n      let privates = internal(this);\n      if (privates.animationTimer) {\n        return false;\n      }\n      return true;\n    }\n\n    set paused (value) {\n      throw new Error(\"Sprite.Sheet.paused readonly\");\n    }\n\n    /**\n     * @return {number} Return current frame number\n     */\n    get currentFrame () {\n      let privates = internal(this);\n      return privates.currentFrame;\n    }\n\n    set currentFrame (value) {\n      throw new Error(\"Sprite.Sheet.currentFrame readonly\");\n    }\n\n    /**\n     * @return {string} Return\n     */\n    get currentAnimation () {\n      let privates = internal(this);\n      return privates.currentAnimation;\n    }\n\n    set currentAnimation (value) {\n      throw new Error(\"Sprite.Sheet.currentAnimation readonly\");\n    }\n\n    /**\n     * Play a frame or an animation\n     * @param {Object} choice frame number of animation name, eg. 0 for frame or \"walkdown\" for animation\n     */\n    play (choice) {\n      let privates = internal(this);\n      if (privates.animationTimer) {\n        clearInterval(privates.animationTimer);\n        privates.animationTimer = null;\n      }\n\n      if (Number.isInteger(choice)) {\n        // Argument points a frame\n        privates.currentFrame = choice;\n        this.emit(\"change\");\n      } else if (typeof choice == \"string\") {\n        // Argument points an animation name\n        let animation = privates.animations[choice];\n\n        if (!animation) { // if animation is not exist\n          console.error(animation, privates.animations, choice);\n          throw new Error(\"Sprite.Sheet.play invalid animation\");\n        }\n\n        // if animation is single frame number\n        if (Number.isFinite(animation)) {\n          privates.currentAnimation = choice;\n          return this.play(animation);\n        }\n\n        // start frame number\n        let begin = null;\n        // finish frame number\n        let end = null;\n        // what action after animation finished\n        let next = null;\n        // the space between each frame, ms\n        let time = null;\n\n        if (animation instanceof Array) {\n          // if animation format is like [begin, end, next, time]\n          begin = animation[0];\n          end = animation[1];\n          next = animation[2];\n          time = animation[3];\n        } else if (animation.frames && animation.frames instanceof Array) {\n          // if animation format is like { frames: [begin, end], next: \"next\", speed: \"time\" }\n          begin = animation.frames[0];\n          end = animation.frames[animation.frames.length - 1];\n          next = animation.next;\n          time = animation.speed;\n        }\n\n        if ( // Data ensure\n          !Number.isFinite(begin) || begin < 0 || begin >= privates.frameCount ||\n          !Number.isFinite(end) || end < 0 || end >= privates.frameCount ||\n          !Number.isFinite(time) || time <= 0\n        ) {\n          console.error(begin, end, time, this);\n          throw new Error(\"Sprite.Sheet.play Invalid animation data\");\n        }\n\n        // Play first frame in animation\n        privates.currentAnimation = choice;\n        privates.currentFrame = begin;\n        this.emit(\"change\");\n\n        // Play other frame in animation\n        privates.animationTimer = setInterval(() => {\n          privates.currentFrame++;\n\n          if (privates.currentFrame > end) {\n            clearInterval(privates.animationTimer);\n            privates.animationTimer = null;\n\n            if (next && next.length && privates.animations[next]) {\n              this.play(next);\n            } else {\n              privates.currentFrame--;\n            }\n            this.emit(\"animationend\");\n          }\n\n          this.emit(\"change\");\n        }, time);\n\n      } else {\n        console.error(choice, internal(this).animations, this);\n        throw new Error(\"Sprite.Sheet.play has an invalid argument\");\n      }\n    }\n\n    /**\n     * Get a certain frame\n     * @param {number} index The index of frame\n     * @return {Object} An Sprite.Frame object\n     */\n    getFrame (index) {\n      let privates = internal(this);\n      if (!Number.isInteger(index)) {\n        index = privates.currentFrame;\n      }\n\n      if (index < 0 || index >= privates.frameCount) {\n        console.error(index, privates, this);\n        throw new Error(\"Sprite.Sheet.getFrame index out of range\");\n      }\n\n      let frame = null;\n      for (let image of privates.images) {\n        let col = Math.floor(image.width / privates.tilewidth);\n        let row = Math.floor(image.height / privates.tileheight);\n        if (index < col * row) {\n          // which row\n          let j = Math.floor(index / col);\n          // which column\n          let i = index - col * j;\n          frame = new Sprite.Frame (\n            image,\n            i * privates.tilewidth, // x\n            j * privates.tileheight, // y\n            privates.tilewidth,\n            privates.tileheight\n          );\n          frame.parent = this;\n          break;\n        }\n        index -= (col * row);\n      }\n\n      if (!frame) {\n        console.error(index, privates, this);\n        throw new Error(\"Sprite.Sheet.getFrame unknown error\");\n      }\n\n      return frame;\n    }\n\n    /**\n     * Draw this sheet on certain renderer\n     * @param {Object} renderer A renderer engine, eg. Sprite.Webgl\n     */\n    draw (renderer) {\n      if (this.visible == false || this.alpha <= 0.01) {\n        return;\n      }\n\n      let privates = internal(this);\n      let frame = this.getFrame(this.currentFrame);\n\n      if (!frame || !frame.image) {\n        console.error(frame, this.currentFrame, this);\n        throw new Error(\"Sprite.Sheet.draw invalid frame\");\n      }\n\n      frame.draw(renderer);\n    }\n\n  });\n\n\n})();\n"]}