{"version":3,"sources":["src/Sprite/SpriteBitmap.js"],"names":[],"mappings":"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","file":"src/Sprite/SpriteBitmap.js","sourcesContent":["/*\n\n2D Game Sprite Library, Built using JavaScript ES6\nCopyright (C) 2015 qhduan(http://qhduan.com)\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n*/\n\n/**\n * @fileoverview Define Sprite.Bitmap\n * @author mail@qhduan.com (QH Duan)\n */\n\n(function () {\n \"use strict\";\n\n  let internal = Sprite.Namespace();\n\n  Sprite.assign(\"Bitmap\", class SpriteBitmap extends Sprite.Display {\n    /**\n     * Sprite.Bitmap's constructor\n     * @constructor\n     */\n    constructor (image) {\n      super();\n      let privates = internal(this);\n\n      if (\n        !image ||\n        typeof image.width != \"number\" || image.width <= 0 ||\n        typeof image.width != \"number\" || image.height <= 0\n      ) {\n        console.error(image);\n        throw new Error(\"Sprite.Bitmap got invalid argument\");\n      }\n\n      /**\n       * The image\n       */\n      privates.image = image;\n    }\n\n    clone () {\n      let privates = internal(this);\n      let bitmap = new Sprite.Bitmap(privates.image);\n      bitmap.x = this.x;\n      bitmap.y = this.y;\n      bitmap.centerX = this.centerX;\n      bitmap.centerY = this.centerY;\n      bitmap.alpha = this.alpha;\n      bitmap.visible = this.visible;\n      return bitmap;\n    }\n\n    /**\n     * @return {Image} Return Sprite.Bitmap's image\n     */\n    get image () {\n      let privates = internal(this);\n      return privates.image;\n    }\n\n    set image (value) {\n      console.error(this);\n      throw new Error(\"Sprite.Bitmap.image readonly\");\n    }\n\n    /**\n     * @return {number} Return Sprite.Bitmap's width\n     */\n    get width () {\n      let privates = internal(this);\n      return privates.image.width;\n    }\n\n    set width (value) {\n      console.error(this);\n      throw new Error(\"Sprite.Bitmap.width readonly\");\n    }\n\n    /**\n     * @return {number} Return Sprite.Bitmap's height\n     */\n    get height () {\n      let privates = internal(this);\n      return privates.image.height;\n    }\n\n    set height (value) {\n      console.error(this);\n      throw new Error(\"Sprite.Bitmap.height readonly\");\n    }\n\n    /**\n     * @param {Object} renderer Draw image on the renderer\n     */\n    draw (renderer) {\n      if (this.alpha <= 0.01 || this.visible != true) {\n        return;\n      }\n      let privates = internal(this);\n      this.drawImage(renderer, privates.image,\n        0, 0, privates.image.width, privates.image.height);\n    }\n\n  });\n\n\n})();\n"]}