"use strict";

/*

A-RPG Game, Built using JavaScript ES6
Copyright (C) 2015 qhduan(http://qhduan.com)

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

*/

(function () {
  "use strict"

  // 游戏无论什么时候都需要预加载的内容
  ;
  function Preload() {
    return new Promise(function (resolve, reject) {
      var promises = new Set();

      var preloadSoundEffects = {
        hurt: "sound/effect/hurt.ogg" // 伤害效果音
      };

      for (var key in preloadSoundEffects) {
        promises.add((function (key, url) {
          return new Promise(function (resolve, reject) {
            if (Game.sounds && Game.sounds[key]) {
              resolve();
            } else {
              Sprite.load(url).then(function (data) {
                Game.sounds[key] = data[0];
                resolve();
              });
            }
          });
        })(key, preloadSoundEffects[key]));
      }

      var preloadItems = ["bag", // 掉落物品用的小包
      "gold" // 金币图标
      ];

      preloadItems.forEach(function (id) {
        promises.add(new Promise(function (resolve, reject) {
          if (Game.items && Game.items[id]) {
            resolve();
          } else {
            Game.Item.load(id).then(function (itemObj) {
              resolve();
            });
          }
        }));
      });

      Promise.all(promises).then(function () {
        resolve();
      });
    });
  }

  // 加载区域，把括地图，角色，物品
  Game.assign("loadArea", function (id) {
    return new Promise(function (resolve, reject) {

      Game.Map.load(id).then(function (mapObj) {

        var area = {
          actors: new Set(), // 角色
          bags: new Set(), // 掉落小包
          items: new Set(), // 其他物品（有碰撞）
          touch: [], // touch或onto会触发的地点/物品
          onto: [], // onto会触发的地点/物品
          map: mapObj
        };

        var promises = new Set();

        promises.add(Preload());

        if (mapObj.data.actors) {
          mapObj.data.actors.forEach(function (element) {
            promises.add(new Promise(function (resolve, reject) {
              Game.Actor.load(element.id).then(function (actorObj) {

                for (var key in element) {
                  actorObj.data[key] = element[key];
                }

                area.actors.add(actorObj);
                actorObj.draw();
                resolve();
              });
            }));
          });
        }

        if (mapObj.spawnMonster && mapObj.spawnMonster.list && mapObj.spawnMonster.count) {
          var _loop = function _loop(monsterId) {
            promises.add(new Promise(function (resolve, reject) {
              Game.Actor.load(monsterId).then(function () {
                resolve();
              });
            }));
          };

          for (var monsterId in mapObj.spawnMonster.list) {
            _loop(monsterId);
          }
        }

        if (mapObj.spawnItem && mapObj.spawnItem.list && mapObj.spawnItem.count) {
          var _loop2 = function _loop2(itemId) {
            promises.add(new Promise(function (resolve, reject) {
              Game.Item.load(itemId).then(function () {
                resolve();
              });
            }));
          };

          for (var itemId in mapObj.spawnItem.list) {
            _loop2(itemId);
          }
        }

        if (mapObj.data.onto) {
          mapObj.data.onto.forEach(function (element) {
            area.onto.push(element);
          });
        }

        if (mapObj.data.touch) {
          mapObj.data.touch.forEach(function (element) {
            area.touch.push(element);
          });
        }

        Promise.all(promises).then(function () {
          resolve(area);
        });
      }); //map
    });
  });
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9HYW1lL0dhbWVBcmVhLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFxQkEsQ0FBQyxZQUFZO0FBQ1g7OztBQUFZLEdBQUM7QUFHYixXQUFTLE9BQU8sR0FBSTtBQUNsQixXQUFPLElBQUksT0FBTyxDQUFDLFVBQVUsT0FBTyxFQUFFLE1BQU0sRUFBRTtBQUM1QyxVQUFJLFFBQVEsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDOztBQUV6QixVQUFJLG1CQUFtQixHQUFHO0FBQ3hCLFlBQUksRUFBRSx1QkFBdUI7QUFBQSxPQUM5QixDQUFDOztBQUVGLFdBQUssSUFBSSxHQUFHLElBQUksbUJBQW1CLEVBQUU7QUFDbkMsZ0JBQVEsQ0FBQyxHQUFHLENBQ1YsQ0FBQyxVQUFVLEdBQUcsRUFBRSxHQUFHLEVBQUU7QUFDbkIsaUJBQU8sSUFBSSxPQUFPLENBQUMsVUFBVSxPQUFPLEVBQUUsTUFBTSxFQUFFO0FBQzVDLGdCQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRTtBQUNuQyxxQkFBTyxFQUFFLENBQUM7YUFDWCxNQUFNO0FBQ0wsb0JBQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsSUFBSSxFQUFFO0FBQ3BDLG9CQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMzQix1QkFBTyxFQUFFLENBQUM7ZUFDWCxDQUFDLENBQUM7YUFDSjtXQUNGLENBQUMsQ0FBQztTQUNKLENBQUEsQ0FBRSxHQUFHLEVBQUUsbUJBQW1CLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FDbEMsQ0FBQztPQUNIOztBQUVELFVBQUksWUFBWSxHQUFHLENBQ2pCLEtBQUs7QUFDTDtBQUFNLE9BQ1AsQ0FBQzs7QUFFRixrQkFBWSxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVB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ZmlsZSI6IkdhbWVBcmVhLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcblxuQS1SUEcgR2FtZSwgQnVpbHQgdXNpbmcgSmF2YVNjcmlwdCBFUzZcbkNvcHlyaWdodCAoQykgMjAxNSBxaGR1YW4oaHR0cDovL3FoZHVhbi5jb20pXG5cblRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG5pdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxudGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbihhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG5cblRoaXMgcHJvZ3JhbSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2Zcbk1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbkdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG5cbllvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG5hbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbS4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cblxuKi9cblxuXG4oZnVuY3Rpb24gKCkge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICAvLyDmuLjmiI/ml6Dorrrku4DkuYjml7blgJnpg73pnIDopoHpooTliqDovb3nmoTlhoXlrrlcbiAgZnVuY3Rpb24gUHJlbG9hZCAoKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIGxldCBwcm9taXNlcyA9IG5ldyBTZXQoKTtcblxuICAgICAgbGV0IHByZWxvYWRTb3VuZEVmZmVjdHMgPSB7XG4gICAgICAgIGh1cnQ6IFwic291bmQvZWZmZWN0L2h1cnQub2dnXCIgLy8g5Lyk5a6z5pWI5p6c6Z+zXG4gICAgICB9O1xuXG4gICAgICBmb3IgKGxldCBrZXkgaW4gcHJlbG9hZFNvdW5kRWZmZWN0cykge1xuICAgICAgICBwcm9taXNlcy5hZGQoXG4gICAgICAgICAgKGZ1bmN0aW9uIChrZXksIHVybCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgaWYgKEdhbWUuc291bmRzICYmIEdhbWUuc291bmRzW2tleV0pIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgU3ByaXRlLmxvYWQodXJsKS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICBHYW1lLnNvdW5kc1trZXldID0gZGF0YVswXTtcbiAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSkoa2V5LCBwcmVsb2FkU291bmRFZmZlY3RzW2tleV0pXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIGxldCBwcmVsb2FkSXRlbXMgPSBbXG4gICAgICAgIFwiYmFnXCIsIC8vIOaOieiQveeJqeWTgeeUqOeahOWwj+WMhVxuICAgICAgICBcImdvbGRcIiAvLyDph5HluIHlm77moIdcbiAgICAgIF07XG5cbiAgICAgIHByZWxvYWRJdGVtcy5mb3JFYWNoKGZ1bmN0aW9uIChpZCkge1xuICAgICAgICBwcm9taXNlcy5hZGQoXG4gICAgICAgICAgbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgaWYgKEdhbWUuaXRlbXMgJiYgR2FtZS5pdGVtc1tpZF0pIHtcbiAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgR2FtZS5JdGVtLmxvYWQoaWQpLnRoZW4oZnVuY3Rpb24gKGl0ZW1PYmopIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgICB9KTtcblxuICAgICAgUHJvbWlzZS5hbGwocHJvbWlzZXMpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICByZXNvbHZlKCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIOWKoOi9veWMuuWfn++8jOaKiuaLrOWcsOWbvu+8jOinkuiJsu+8jOeJqeWTgVxuICBHYW1lLmFzc2lnbihcImxvYWRBcmVhXCIsIGZ1bmN0aW9uIChpZCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICAgIEdhbWUuTWFwLmxvYWQoaWQpLnRoZW4oZnVuY3Rpb24gKG1hcE9iaikge1xuXG4gICAgICAgIGxldCBhcmVhID0ge1xuICAgICAgICAgIGFjdG9yczogbmV3IFNldCgpLCAvLyDop5LoibJcbiAgICAgICAgICBiYWdzOiBuZXcgU2V0KCksIC8vIOaOieiQveWwj+WMhVxuICAgICAgICAgIGl0ZW1zOiBuZXcgU2V0KCksIC8vIOWFtuS7lueJqeWTge+8iOacieeisOaSnu+8iVxuICAgICAgICAgIHRvdWNoOiBbXSwgLy8gdG91Y2jmiJZvbnRv5Lya6Kem5Y+R55qE5Zyw54K5L+eJqeWTgVxuICAgICAgICAgIG9udG86IFtdLCAvLyBvbnRv5Lya6Kem5Y+R55qE5Zyw54K5L+eJqeWTgVxuICAgICAgICAgIG1hcDogbWFwT2JqXG4gICAgICAgIH07XG5cbiAgICAgICAgbGV0IHByb21pc2VzID0gbmV3IFNldCgpO1xuXG4gICAgICAgIHByb21pc2VzLmFkZChQcmVsb2FkKCkpO1xuXG4gICAgICAgIGlmIChtYXBPYmouZGF0YS5hY3RvcnMpIHtcbiAgICAgICAgICBtYXBPYmouZGF0YS5hY3RvcnMuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICAgICAgcHJvbWlzZXMuYWRkKFxuICAgICAgICAgICAgICBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgR2FtZS5BY3Rvci5sb2FkKGVsZW1lbnQuaWQpLnRoZW4oZnVuY3Rpb24gKGFjdG9yT2JqKSB7XG5cbiAgICAgICAgICAgICAgICAgIGZvciAobGV0IGtleSBpbiBlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGFjdG9yT2JqLmRhdGFba2V5XSA9IGVsZW1lbnRba2V5XTtcbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgYXJlYS5hY3RvcnMuYWRkKGFjdG9yT2JqKTtcbiAgICAgICAgICAgICAgICAgIGFjdG9yT2JqLmRyYXcoKTtcbiAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXG4gICAgICAgICAgbWFwT2JqLnNwYXduTW9uc3RlciAmJlxuICAgICAgICAgIG1hcE9iai5zcGF3bk1vbnN0ZXIubGlzdCAmJlxuICAgICAgICAgIG1hcE9iai5zcGF3bk1vbnN0ZXIuY291bnRcbiAgICAgICAgKSB7XG4gICAgICAgICAgZm9yIChsZXQgbW9uc3RlcklkIGluIG1hcE9iai5zcGF3bk1vbnN0ZXIubGlzdCkge1xuICAgICAgICAgICAgcHJvbWlzZXMuYWRkKFxuICAgICAgICAgICAgICBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgR2FtZS5BY3Rvci5sb2FkKG1vbnN0ZXJJZCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChcbiAgICAgICAgICBtYXBPYmouc3Bhd25JdGVtICYmXG4gICAgICAgICAgbWFwT2JqLnNwYXduSXRlbS5saXN0ICYmXG4gICAgICAgICAgbWFwT2JqLnNwYXduSXRlbS5jb3VudFxuICAgICAgICApIHtcbiAgICAgICAgICBmb3IgKGxldCBpdGVtSWQgaW4gbWFwT2JqLnNwYXduSXRlbS5saXN0KSB7XG4gICAgICAgICAgICBwcm9taXNlcy5hZGQoXG4gICAgICAgICAgICAgIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICBHYW1lLkl0ZW0ubG9hZChpdGVtSWQpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobWFwT2JqLmRhdGEub250bykge1xuICAgICAgICAgIG1hcE9iai5kYXRhLm9udG8uZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICAgICAgYXJlYS5vbnRvLnB1c2goZWxlbWVudCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobWFwT2JqLmRhdGEudG91Y2gpIHtcbiAgICAgICAgICBtYXBPYmouZGF0YS50b3VjaC5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgICAgICBhcmVhLnRvdWNoLnB1c2goZWxlbWVudCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBQcm9taXNlLmFsbChwcm9taXNlcykudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmVzb2x2ZShhcmVhKTtcbiAgICAgICAgfSk7XG5cbiAgICAgIH0pOyAvL21hcFxuXG4gICAgfSk7XG4gIH0pO1xuXG59KSgpO1xuIl19
