{"version":3,"sources":["src/SpriteLoader.js"],"names":[],"mappings":"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","file":"src/SpriteLoader.js","sourcesContent":["\n(function () {\n  \"use strict\";\n\n  Sprite.Cache = {};\n\n  function Fetch (url, callback) {\n    var req = new XMLHttpRequest();\n    req.open(\"GET\", url, true);\n\n    var type = null;\n    if (url.match(/jpg$|jpeg$|png$|bmp$|gif$/i)) {\n      req.responseType = \"blob\";\n      type = \"image\";\n    } else if (url.match(/wav$|mp3$|ogg$/i)) {\n      req.responseType = \"blob\"\n      type = \"audio\";\n    } else if (url.match(/json$/i)) {\n      req.responseType = \"text\"\n      type = \"json\";\n    } else {\n      console.error(url);\n      throw new Error(\"Fetch has an invalid argument\");\n    }\n\n    req.onreadystatechange = function () {\n      if (req.readyState == req.DONE) {\n        if (type == \"image\") {\n          var blob = req.response;\n          var image = new Image();\n          image.onload = function () {\n            // window.URL.revokeObjectURL(image.src);\n            Sprite.Cache[url] = image;\n            callback(image);\n          };\n          image.src = window.URL.createObjectURL(blob);\n        } else if (type == \"audio\") {\n          var blob = req.response;\n          var audio = new Audio();\n          audio.oncanplay = function () {\n            // 如果reoke掉audio，那么audio.load()方法则不能用了\n            // window.URL.revokeObjectURL(audio.src);\n            Sprite.Cache[url] = audio;\n            callback(audio);\n          };\n          audio.src = window.URL.createObjectURL(blob);\n        } else if (type == \"json\") {\n          var json = JSON.parse(req.response);\n          Sprite.Cache[url] = json;\n          callback(json);\n        }\n      }\n    };\n    req.send();\n  }\n\n  Sprite.Loader = class Loader extends Sprite.Event {\n\n    constructor () {\n      super();\n      this._list = [];\n      this._progress = 0;\n    }\n\n    get progress () {\n      return this._progress;\n    }\n\n    set progress (value) {\n      throw new Error(\"Sprite.Loader progress readonly\");\n    }\n\n    add () {\n      for (var i = 0; i < arguments.length; i++) {\n        if (arguments[i] instanceof Array) {\n          this._list = this._list.concat(arguments[i]);\n        } else if (typeof arguments[i] == \"string\" && arguments[i].length > 0) {\n          this._list.push(arguments[i]);\n        } else {\n          console.error(i, arguments[i], arguments);\n          throw new Error(\"Sprite.Loader.add Error\");\n        }\n      }\n    }\n\n    start () {\n      var done = 0;\n      var ret = [];\n      ret.length = this._list.length;\n\n      var Done = () => {\n        done++;\n\n        this._progress = done / this._list.length;\n        this.emit(\"progress\");\n\n        if (done >= this._list.length) {\n          this.emit(\"complete\", true, ret);\n        }\n      }\n\n      this._list.forEach((element, index) => {\n        if (Sprite.Cache.hasOwnProperty(element)) {\n          ret[index] = Sprite.Cache[element];\n          Done();\n        } else {\n          Fetch(element, (result) => {\n            ret[index] = result;\n            Done();\n          });\n        }\n      });\n\n    }\n  }\n\n\n})();\n"]}